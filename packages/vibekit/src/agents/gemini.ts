import { BaseAgent, BaseAgentConfig, AgentCommandConfig } from "./base";
import { ModelConfig } from "./utils";
import {
  GeminiConfig,
  GeminiResponse,
  GeminiStreamCallbacks,
  Conversation,
  ModelProvider,
  AgentType,
} from "../types";

export class GeminiAgent extends BaseAgent {
  private geminiApiKey: string;
  private model?: string;

  private escapePrompt(prompt: string): string {
    // Escape backticks and other special characters
    return prompt.replace(/[`"$\\]/g, "\\$&");
  }

  constructor(config: GeminiConfig) {
    const baseConfig: BaseAgentConfig = {
      githubToken: config.githubToken,
      repoUrl: config.repoUrl,
      sandboxProvider: config.sandboxProvider,
      secrets: config.secrets,
      sandboxId: config.sandboxId,
      telemetry: config.telemetry,
      workingDirectory: config.workingDirectory,
      mcpConfig: config.mcpConfig,
    };

    super(baseConfig);

    // Validate that provider is gemini or google if specified
    if (config.provider && !["gemini", "google"].includes(config.provider)) {
      throw new Error(
        "Gemini agent only supports 'gemini' or 'google' provider"
      );
    }

    this.geminiApiKey = config.providerApiKey || "";
    this.model = config.model;
  }

  protected getCommandConfig(
    prompt: string,
    mode?: "ask" | "code"
  ): AgentCommandConfig {
    let instruction: string;
    if (mode === "ask") {
      instruction =
        "Research the repository and answer the user's questions. " +
        "Do NOT make any changes to any files in the repository.";
    } else {
      instruction =
        "Do the necessary changes to the codebase based on the users input.\n" +
        "Don't ask any follow up questions.";
    }

    const escapedPrompt = this.escapePrompt(prompt);
    let _prompt = `${instruction}\n\nUser: ${escapedPrompt}`;

    return {
      command: `echo "${_prompt}" | gemini --model ${
        this.model || "gemini-2.5-pro"
      } --yolo`,
      errorPrefix: "Gemini",
      labelName: "gemini",
      labelColor: "4285F4",
      labelDescription: "Generated by Gemini AI agent",
    };
  }

  protected getDefaultTemplate(): string {
    return "vibekit-gemini";
  }

  protected getEnvironmentVariables(): Record<string, string> {
    return {
      GEMINI_API_KEY: this.geminiApiKey,
      GOOGLE_API_KEY: this.geminiApiKey, // Some tools might expect this name
    };
  }

  protected getApiKey(): string {
    return this.geminiApiKey;
  }

  protected getAgentType(): AgentType {
    return "gemini";
  }

  protected getModelConfig(): ModelConfig {
    return {
      provider: "gemini",
      apiKey: this.geminiApiKey,
      model: this.model,
    };
  }

  // Override generateCode to support history and MCP tools
  public async generateCode(
    prompt: string,
    mode?: "ask" | "code",
    branch?: string,
    history?: Conversation[],
    callbacks?: GeminiStreamCallbacks,
    background?: boolean
  ): Promise<GeminiResponse> {
    // Get available MCP tools
    const availableTools = await this.getAvailableTools();
    
    let instruction: string;
    if (mode === "ask") {
      instruction =
        "Research the repository and answer the user's questions. " +
        "Do NOT make any changes to any files in the repository.";
    } else {
      instruction =
        "Do the necessary changes to the codebase based on the users input.\n" +
        "Don't ask any follow up questions.";
    }

    if (history && history.length > 0) {
      instruction += `\n\nConversation history: ${history
        .map((h) => `${h.role}\n ${h.content}`)
        .join("\n\n")}`;
    }
    
    // Add MCP tools information to instruction if available
    if (availableTools.length > 0) {
      const toolDescriptions = availableTools.map(tool => 
        `- ${tool.name}: ${tool.description}`
      ).join('\n');
      instruction += `\n\nAvailable MCP tools:\n${toolDescriptions}\n` +
        "You can reference these tools by using [TOOL_CALL:toolname]args[/TOOL_CALL] format.";
    }

    const escapedPrompt = this.escapePrompt(prompt);

    let _prompt = `${instruction}\n\nUser: ${escapedPrompt}`;

    // Override the command config with MCP-aware instruction
    const originalGetCommandConfig = this.getCommandConfig.bind(this);
    this.getCommandConfig = (p: string, m?: "ask" | "code") => ({
      ...originalGetCommandConfig(p, m),
      command: `echo "${_prompt}" | gemini --model ${
        this.model || "gemini-2.5-pro"
      } --yolo`,
    });

    const result = await super.generateCode(
      prompt,
      mode,
      branch,
      history,
      callbacks,
      background
    );

    // Restore original method
    this.getCommandConfig = originalGetCommandConfig;

    // Process result for MCP tool calls if needed
    return await this.processMCPResponse(result as GeminiResponse, availableTools);
  }

  /**
   * Process Gemini response and execute any MCP tool calls
   */
  private async processMCPResponse(
    response: GeminiResponse, 
    availableTools: any[]
  ): Promise<GeminiResponse> {
    if (!availableTools.length || !response.stdout) {
      return response;
    }

    try {
      let processedStdout = response.stdout;
      const toolCallRegex = /\[TOOL_CALL:(\w+)\](.+?)\[\/TOOL_CALL\]/gs;
      const toolCalls = [...response.stdout.matchAll(toolCallRegex)];
      
      for (const [fullMatch, toolName, argsStr] of toolCalls) {
        try {
          const args = JSON.parse(argsStr.trim());
          const toolResult = await this.executeMCPTool(toolName, args);
          
          // Replace the tool call with the result
          const resultText = `[TOOL_RESULT:${toolName}]${JSON.stringify(toolResult)}[/TOOL_RESULT]`;
          processedStdout = processedStdout.replace(fullMatch, resultText);
          
        } catch (error) {
          console.warn(`Failed to execute MCP tool ${toolName}:`, (error as Error)?.message || error);
          const errorText = `[TOOL_ERROR:${toolName}]${(error as Error)?.message || error}[/TOOL_ERROR]`;
          processedStdout = processedStdout.replace(fullMatch, errorText);
        }
      }

      return {
        ...response,
        stdout: processedStdout,
        mcpToolsUsed: toolCalls.length
      };
      
    } catch (error) {
      console.warn('Error processing MCP response:', (error as Error)?.message || error);
      return response;
    }
  }
}
