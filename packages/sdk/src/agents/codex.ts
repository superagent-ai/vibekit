import { BaseAgent, BaseAgentConfig, AgentCommandConfig } from "./base";
import { ModelConfig } from "./utils";
import {
  AgentType,
  CodexConfig,
  CodexResponse,
  CodexStreamCallbacks,
  Conversation,
  ModelProvider,
} from "../types";

export class CodexAgent extends BaseAgent {
  private providerApiKey: string;
  private provider: ModelProvider;
  private model?: string;

  private escapePrompt(prompt: string): string {
    // Comprehensive escaping for bash double quotes - production ready
    return prompt
      .replace(/\\/g, '\\\\')    // Escape backslashes FIRST
      .replace(/"/g, '\\"')      // Escape double quotes
      .replace(/'/g, "'\\''")    // Escape single quotes (close quote, escaped quote, reopen)
      .replace(/\$/g, '\\$')     // Escape dollar signs
      .replace(/`/g, '\\`')      // Escape backticks (command substitution)
      .replace(/!/g, '\\!')      // Escape exclamation (history expansion)
      .replace(/\n/g, '\\n')     // Escape newlines
      .replace(/\r/g, '\\r')     // Escape carriage returns
      .replace(/\t/g, '\\t');    // Escape tabs
  }

  constructor(config: CodexConfig) {
    const baseConfig: BaseAgentConfig = {
      githubToken: config.githubToken,
      repoUrl: config.repoUrl,
      sandboxProvider: config.sandboxProvider,
      secrets: config.secrets,
      sandboxId: config.sandboxId,
      workingDirectory: config.workingDirectory,
    };

    super(baseConfig);

    // Support new providerApiKey field with fallback to deprecated fields for backward compatibility
    this.providerApiKey = config.providerApiKey || "";
    this.provider = config.provider || "openai";
    this.model = config.model;

    if (!this.providerApiKey) {
      throw new Error(
        "Provider API key is required. Please provide providerApiKey, apiKey, or openaiApiKey."
      );
    }
  }

  protected getCommandConfig(
    prompt: string,
    mode?: "ask" | "code"
  ): AgentCommandConfig {
    let instruction: string;
    if (mode === "ask") {
      instruction =
        "Research the repository and answer the user's questions. " +
        "Do NOT make any changes to any files in the repository.";
    } else {
      instruction =
        "Do the necessary changes to the codebase based on the users input.\n" +
        "Don't ask any follow up questions.";
    }

    const escapedPrompt = this.escapePrompt(prompt);
    let _prompt = `${instruction}\n\nUser: ${escapedPrompt}`;

    return {
      command: `codex exec --full-auto --skip-git-repo-check${
        this.model ? ` --model ${this.model}` : ""
      } "${this.escapePrompt(_prompt)}"`,
      errorPrefix: "Codex",
      labelName: "codex",
      labelColor: "ededed",
      labelDescription: "Pull requests generated by Codex agent",
    };
  }

  protected getDefaultTemplate(): string {
    return "vibekit-codex";
  }

  protected getEnvironmentVariables(): Record<string, string> {
    const envKey = `${this.provider.toUpperCase()}_API_KEY`;
    return {
      [envKey]: this.providerApiKey,
    };
  }

  protected getApiKey(): string {
    return this.providerApiKey;
  }

  protected getAgentType(): AgentType {
    return "codex";
  }

  protected getModelConfig(): ModelConfig {
    return {
      provider: this.provider,
      apiKey: this.providerApiKey,
      model: this.model,
    };
  }

  // Override generateCode to support history in the prompt
  public async generateCode(
    prompt: string,
    mode?: "ask" | "code",
    branch?: string,
    history?: Conversation[],
    callbacks?: CodexStreamCallbacks,
    background?: boolean
  ): Promise<CodexResponse> {
    let instruction: string;

    if (mode === "ask") {
      instruction =
        "Research the repository and answer the user's questions. " +
        "Do NOT make any changes to any files in the repository.";
    } else {
      instruction =
        "Do the necessary changes to the codebase based on the users input.\n" +
        "Don't ask any follow up questions.";
    }

    const escapedPrompt = this.escapePrompt(prompt);
    let _prompt = `${instruction}\n\nUser: ${escapedPrompt}`;

    if (history) {
      _prompt += `\n\nConversation history: ${history
        .map((h) => `${h.role}\n ${this.escapePrompt(h.content)}`)
        .join("\n\n")}`;
    }
    // Override the command config with history-aware prompt
    const originalGetCommandConfig = this.getCommandConfig.bind(this);
    this.getCommandConfig = (p: string, m?: "ask" | "code") => ({
      ...originalGetCommandConfig(p, m),
      command: `codex exec --full-auto --skip-git-repo-check${
        this.model ? ` --model ${this.model}` : ""
      } "${this.escapePrompt(_prompt)}"`,
    });

    const result = await super.generateCode(
      prompt,
      mode,
      branch,
      history,
      callbacks,
      background
    );

    // Restore original method
    this.getCommandConfig = originalGetCommandConfig;

    return result as CodexResponse;
  }
}
